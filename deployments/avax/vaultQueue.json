{
  "address": "0xE6325F8465dD875BE46C6997F955D6615766D8bE",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wethVault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stethVault",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "creditor",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "dstVault",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "depositContract",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "timestamp",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "enum VaultQueue.TransferAction",
              "name": "action",
              "type": "uint8"
            }
          ],
          "indexed": false,
          "internalType": "struct VaultQueue.Transfer",
          "name": "txn",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "portion",
          "type": "uint256"
        }
      ],
      "name": "Disburse",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "STETH_VAULT",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH_VAULT",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "hasWithdrawal",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "qTransfer",
      "outputs": [
        {
          "internalType": "address",
          "name": "creditor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dstVault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "depositContract",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "timestamp",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "enum VaultQueue.TransferAction",
          "name": "action",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "queueSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "srcVault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dstVault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "depositContract",
          "type": "address"
        },
        {
          "internalType": "enum VaultQueue.TransferAction",
          "name": "transferAction",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "queueTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_queueSize",
          "type": "uint256"
        }
      ],
      "name": "setQueueSize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "totalAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "transfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xf3221cd87f9e692ebaf25fcac7515e0a09c4a80c6de4b3cc6f0317fc08deb410",
  "receipt": {
    "to": null,
    "from": "0xd4816D144C005B29dF24C8eb1865fB8A1e79FdDE",
    "contractAddress": "0xE6325F8465dD875BE46C6997F955D6615766D8bE",
    "transactionIndex": 13,
    "gasUsed": "1716141",
    "logsBloom": "0x
    "blockHash": "0x3ebfbfa1fa2e6d25b19765ed326bedb00f19c9dae90d04c54df6ef87ebda12d3",
    "transactionHash": "0xf3221cd87f9e692ebaf25fcac7515e0a09c4a80c6de4b3cc6f0317fc08deb410",
    "logs": [],
    "blockNumber": 13160038,
    "cumulativeGasUsed": "4331555",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x98d03125c62DaE2328D9d3cb32b7B969e6a87787",
    "0xd4816D144C005B29dF24C8eb1865fB8A1e79FdDE"
  ],
  "solcInputHash": "b90c90d3594f08899efde874a4771bf6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wethVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stethVault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"creditor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dstVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"depositContract\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"enum VaultQueue.TransferAction\",\"name\":\"action\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct VaultQueue.Transfer\",\"name\":\"txn\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"portion\",\"type\":\"uint256\"}],\"name\":\"Disburse\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"STETH_VAULT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH_VAULT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"hasWithdrawal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"qTransfer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"creditor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dstVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"depositContract\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"enum VaultQueue.TransferAction\",\"name\":\"action\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"queueSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"srcVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dstVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"depositContract\",\"type\":\"address\"},{\"internalType\":\"enum VaultQueue.TransferAction\",\"name\":\"transferAction\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"queueTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_queueSize\",\"type\":\"uint256\"}],\"name\":\"setQueueSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/utils/VaultQueue.sol\":\"VaultQueue\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x89fa60d14355f7ae06af11e28fce2bb90c5c6186645d681a30e1b36234a4c210\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"contracts/interfaces/ICRV.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\ninterface ICRV {\\n    function get_dy(\\n        int128 _indexIn,\\n        int128 _indexOut,\\n        uint256 _amountIn\\n    ) external view returns (uint256);\\n\\n    // https://github.com/curvefi/curve-contract/blob/\\n    // b0bbf77f8f93c9c5f4e415bce9cd71f0cdee960e/contracts/pools/steth/StableSwapSTETH.vy#L431\\n    function exchange(\\n        int128 _indexIn,\\n        int128 _indexOut,\\n        uint256 _amountIn,\\n        uint256 _minAmountOut\\n    ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xd2277c5ea1909c5760c9f649c46ea93ddb7bdcae04ec443001e329182545e58f\",\"license\":\"MIT\"},\"contracts/interfaces/IRibbon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\nimport {Vault} from \\\"../libraries/Vault.sol\\\";\\n\\ninterface IRibbonVault {\\n    function deposit(uint256 amount) external;\\n\\n    function depositETH() external payable;\\n\\n    function cap() external view returns (uint256);\\n\\n    function WETH() external view returns (address);\\n\\n    function withdrawals(address)\\n        external\\n        view\\n        returns (Vault.Withdrawal memory);\\n\\n    function depositFor(uint256 amount, address creditor) external;\\n\\n    function depositFor(address creditor) external payable;\\n\\n    function vaultParams() external view returns (Vault.VaultParams memory);\\n\\n    function completeWithdraw() external;\\n\\n    function initiateWithdraw(uint256 numShares) external;\\n\\n    function redeem(uint256 numShares) external;\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    // STETH\\n    function STETH() external view returns (address);\\n\\n    function collateralToken() external view returns (address);\\n\\n    function completeWithdraw(uint256 minAmountOut) external;\\n}\\n\\ninterface IStrikeSelection {\\n    function getStrikePrice(uint256 expiryTimestamp, bool isPut)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function delta() external view returns (uint256);\\n}\\n\\ninterface IOptionsPremiumPricer {\\n    function getPremium(\\n        uint256 strikePrice,\\n        uint256 timeToExpiry,\\n        bool isPut\\n    ) external view returns (uint256);\\n\\n    function getPremiumInStables(\\n        uint256 strikePrice,\\n        uint256 timeToExpiry,\\n        bool isPut\\n    ) external view returns (uint256);\\n\\n    function getOptionDelta(\\n        uint256 spotPrice,\\n        uint256 strikePrice,\\n        uint256 volatility,\\n        uint256 expiryTimestamp\\n    ) external view returns (uint256 delta);\\n\\n    function getUnderlyingPrice() external view returns (uint256);\\n\\n    function priceOracle() external view returns (address);\\n\\n    function volatilityOracle() external view returns (address);\\n\\n    function optionId() external view returns (bytes32);\\n}\\n\\ninterface IDepositContract {\\n    function depositFor(address recipient) external payable;\\n}\\n\",\"keccak256\":\"0xd8cdef177b0e0b54bf7ac47bcfa1b111b07b8570a724bf64af4bb9a3470fe173\",\"license\":\"MIT\"},\"contracts/interfaces/ISAVAX.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ISAVAX is IERC20 {\\n    function getSharesByPooledAvax(uint256 avaxAmount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getPooledAvaxByShares(uint256 shareAmount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function submit() external payable returns (uint256);\\n}\\n\",\"keccak256\":\"0x4348d3e58de49dc2bc50cb5794cdc2c38a89bbc6213f457ac4fd011e283e4888\",\"license\":\"MIT\"},\"contracts/libraries/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nlibrary Vault {\\n    /************************************************\\n     *  IMMUTABLES & CONSTANTS\\n     ***********************************************/\\n\\n    // Fees are 6-decimal places. For example: 20 * 10**6 = 20%\\n    uint256 internal constant FEE_MULTIPLIER = 10**6;\\n\\n    // Premium discount has 1-decimal place. For example: 80 * 10**1 = 80%. Which represents a 20% discount.\\n    uint256 internal constant PREMIUM_DISCOUNT_MULTIPLIER = 10;\\n\\n    // Otokens have 8 decimal places.\\n    uint256 internal constant OTOKEN_DECIMALS = 8;\\n\\n    // Percentage of funds allocated to options is 2 decimal places. 10 * 10**2 = 10%\\n    uint256 internal constant OPTION_ALLOCATION_MULTIPLIER = 10**2;\\n\\n    // Placeholder uint value to prevent cold writes\\n    uint256 internal constant PLACEHOLDER_UINT = 1;\\n\\n    struct VaultParams {\\n        // Option type the vault is selling\\n        bool isPut;\\n        // Token decimals for vault shares\\n        uint8 decimals;\\n        // Asset used in Theta / Delta Vault\\n        address asset;\\n        // Underlying asset of the options sold by vault\\n        address underlying;\\n        // Minimum supply of the vault shares issued, for ETH it's 10**10\\n        uint56 minimumSupply;\\n        // Vault cap\\n        uint104 cap;\\n    }\\n\\n    struct OptionState {\\n        // Option that the vault is shorting / longing in the next cycle\\n        address nextOption;\\n        // Option that the vault is currently shorting / longing\\n        address currentOption;\\n        // The timestamp when the `nextOption` can be used by the vault\\n        uint32 nextOptionReadyAt;\\n    }\\n\\n    struct VaultState {\\n        // 32 byte slot 1\\n        //  Current round number. `round` represents the number of `period`s elapsed.\\n        uint16 round;\\n        // Amount that is currently locked for selling options\\n        uint104 lockedAmount;\\n        // Amount that was locked for selling options in the previous round\\n        // used for calculating performance fee deduction\\n        uint104 lastLockedAmount;\\n        // 32 byte slot 2\\n        // Stores the total tally of how much of `asset` there is\\n        // to be used to mint rTHETA tokens\\n        uint128 totalPending;\\n        // Amount locked for scheduled withdrawals;\\n        uint128 queuedWithdrawShares;\\n    }\\n\\n    struct DepositReceipt {\\n        // Maximum of 65535 rounds. Assuming 1 round is 7 days, maximum is 1256 years.\\n        uint16 round;\\n        // Deposit amount, max 20,282,409,603,651 or 20 trillion ETH deposit\\n        uint104 amount;\\n        // Unredeemed shares balance\\n        uint128 unredeemedShares;\\n    }\\n\\n    struct Withdrawal {\\n        // Maximum of 65535 rounds. Assuming 1 round is 7 days, maximum is 1256 years.\\n        uint16 round;\\n        // Number of shares withdrawn\\n        uint128 shares;\\n    }\\n\\n    struct AuctionSellOrder {\\n        // Amount of `asset` token offered in auction\\n        uint96 sellAmount;\\n        // Amount of oToken requested in auction\\n        uint96 buyAmount;\\n        // User Id of delta vault in latest gnosis auction\\n        uint64 userId;\\n    }\\n}\\n\",\"keccak256\":\"0x462aa30f83c322d3129ded8da0d5f8430425a04c8c2d87787f33d7d5c41c1571\",\"license\":\"MIT\"},\"contracts/utils/VaultQueue.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {\\n    Initializable\\n} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {\\n    OwnableUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {\\n    ReentrancyGuardUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {\\n    SafeERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {ISAVAX} from \\\"../interfaces/ISAVAX.sol\\\";\\nimport {IRibbonVault, IDepositContract} from \\\"../interfaces/IRibbon.sol\\\";\\nimport {ICRV} from \\\"../interfaces/ICRV.sol\\\";\\nimport {Vault} from \\\"../libraries/Vault.sol\\\";\\nimport {DSMath} from \\\"../vendor/DSMath.sol\\\";\\n\\ncontract VaultQueue is\\n    Initializable,\\n    OwnableUpgradeable,\\n    ReentrancyGuardUpgradeable\\n{\\n    enum TransferAction {INTERVAULT, WITHDRAW}\\n    struct Transfer {\\n        address creditor;\\n        address dstVault;\\n        address depositContract;\\n        uint32 timestamp;\\n        uint256 amount;\\n        TransferAction action;\\n    }\\n\\n    using SafeERC20 for IERC20;\\n\\n    mapping(address => Transfer[]) public qTransfer;\\n    mapping(address => uint256) public totalAmount;\\n\\n    address public immutable WETH_VAULT;\\n    address public immutable STETH_VAULT;\\n    uint256 public queueSize;\\n\\n    event Disburse(address vault, Transfer txn, uint256 portion);\\n\\n    constructor(address _wethVault, address _stethVault) {\\n        WETH_VAULT = _wethVault; // Can be the native vault (weth or wavax)\\n        STETH_VAULT = _stethVault; // Must ONLY be steth vault.  (savax vault returns erc20, set as keeper)\\n        queueSize = 32;\\n    }\\n\\n    function initialize() external initializer {\\n        __ReentrancyGuard_init();\\n        __Ownable_init();\\n\\n        transferOwnership(msg.sender);\\n    }\\n\\n    function getInterVaultBalance(address vault)\\n        private\\n        view\\n        returns (uint256 balance)\\n    {\\n        // Case 1. stETH - Withdrawing gives stETH\\n        // Case 2. WETH - Withdrawing gives ETH\\n        // Case 3. erc20 token\\n        if (vault == STETH_VAULT) {\\n            address steth = IRibbonVault(vault).STETH();\\n            balance = IERC20(steth).balanceOf(address(this));\\n        } else if (vault == WETH_VAULT) {\\n            balance = address(this).balance;\\n        } else {\\n            Vault.VaultParams memory vaultParams =\\n                IRibbonVault(vault).vaultParams();\\n            balance = IERC20(vaultParams.asset).balanceOf(address(this));\\n        }\\n    }\\n\\n    function withdrawToCreditor(\\n        address vault,\\n        address creditor,\\n        uint256 portion\\n    ) private {\\n        if (vault == STETH_VAULT) {\\n            address steth = IRibbonVault(vault).STETH();\\n            IERC20(steth).transfer(creditor, portion);\\n        } else if (vault == WETH_VAULT) {\\n            (bool sent, ) = creditor.call{value: portion}(\\\"\\\");\\n            require(sent, \\\"Failed to withdraw to creditor\\\");\\n        } else {\\n            Vault.VaultParams memory vaultParams =\\n                IRibbonVault(vault).vaultParams();\\n            IERC20(vaultParams.asset).transfer(creditor, portion);\\n        }\\n    }\\n\\n    function transferToVault(\\n        address depositContract,\\n        address creditor,\\n        uint256 portion\\n    ) private {\\n        IDepositContract(depositContract).depositFor{value: portion}(creditor);\\n    }\\n\\n    function disburse(address vault) private {\\n        uint256 balance = getInterVaultBalance(vault);\\n        uint256 len = qTransfer[vault].length;\\n        uint256 totalAmt = totalAmount[vault];\\n        totalAmount[vault] = 0;\\n\\n        for (uint256 j = len; j > 0; j--) {\\n            Transfer memory queue = pop(qTransfer[vault]);\\n\\n            uint256 portion =\\n                DSMath.wmul(balance, DSMath.wdiv(queue.amount, totalAmt));\\n            if (portion > 0) {\\n                if (queue.action == TransferAction.INTERVAULT) {\\n                    transferToVault(\\n                        queue.depositContract,\\n                        queue.creditor,\\n                        portion\\n                    );\\n                } else if (queue.action == TransferAction.WITHDRAW) {\\n                    withdrawToCreditor(vault, queue.creditor, portion);\\n                }\\n                emit Disburse(vault, queue, portion);\\n            }\\n        }\\n    }\\n\\n    function transfer(address vault) external onlyOwner nonReentrant {\\n        uint256 withdrawals =\\n            IRibbonVault(vault).withdrawals(address(this)).shares;\\n        if (withdrawals > 0) {\\n            if (vault == STETH_VAULT) {\\n                IRibbonVault(vault).completeWithdraw(0);\\n                disburse(vault);\\n            } else {\\n                IRibbonVault(vault).completeWithdraw();\\n                disburse(vault);\\n            }\\n        }\\n    }\\n\\n    function queueTransfer(\\n        address srcVault,\\n        address dstVault,\\n        address depositContract,\\n        TransferAction transferAction,\\n        uint256 amount\\n    ) external nonReentrant {\\n        require(\\n            !hasWithdrawal(srcVault, msg.sender),\\n            \\\"Withdraw already submitted\\\"\\n        );\\n        require(qTransfer[srcVault].length < queueSize, \\\"Transfer queue full\\\");\\n\\n        if (transferAction == TransferAction.INTERVAULT) {\\n            require(depositContract != address(0), \\\"No deposit contract\\\");\\n        } else if (transferAction == TransferAction.WITHDRAW) {\\n            // depositContract is not used on withdraw, so let's set it to msg.sender\\n            require(\\n                depositContract == msg.sender,\\n                \\\"On withdraw, depositContract must be msg.sender\\\"\\n            );\\n        }\\n\\n        IRibbonVault(srcVault).transferFrom(msg.sender, address(this), amount);\\n\\n        IRibbonVault(srcVault).initiateWithdraw(amount);\\n\\n        qTransfer[srcVault].push(\\n            Transfer(\\n                msg.sender,\\n                dstVault,\\n                depositContract,\\n                uint32(block.timestamp),\\n                amount,\\n                transferAction\\n            )\\n        );\\n        totalAmount[srcVault] += amount;\\n    }\\n\\n    function hasWithdrawal(address vault, address user)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        for (uint256 j = 0; j < qTransfer[vault].length; ++j) {\\n            if (user == qTransfer[vault][j].creditor) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function setQueueSize(uint256 _queueSize) external onlyOwner {\\n        queueSize = _queueSize;\\n    }\\n\\n    function pop(Transfer[] storage array) private returns (Transfer memory) {\\n        Transfer memory item = array[array.length - 1];\\n        array.pop();\\n        return item;\\n    }\\n\\n    modifier onlyVault {\\n        require(\\n            msg.sender == WETH_VAULT || msg.sender == STETH_VAULT,\\n            \\\"Invalid sender\\\"\\n        );\\n        _;\\n    }\\n\\n    receive() external payable onlyVault {}\\n}\\n\",\"keccak256\":\"0x3066f809ad725dac41b7eb26ff74f47ed5e9a35b82828055e6086681ae667107\",\"license\":\"MIT\"},\"contracts/vendor/DSMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/// math.sol -- mixin for inline numerical wizardry\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >0.4.13;\\n\\nlibrary DSMath {\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\n    }\\n\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\n    }\\n\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\n    }\\n\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        return x <= y ? x : y;\\n    }\\n\\n    function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        return x >= y ? x : y;\\n    }\\n\\n    function imin(int256 x, int256 y) internal pure returns (int256 z) {\\n        return x <= y ? x : y;\\n    }\\n\\n    function imax(int256 x, int256 y) internal pure returns (int256 z) {\\n        return x >= y ? x : y;\\n    }\\n\\n    uint256 constant WAD = 10**18;\\n    uint256 constant RAY = 10**27;\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, y), WAD / 2) / WAD;\\n    }\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, y), RAY / 2) / RAY;\\n    }\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, WAD), y / 2) / y;\\n    }\\n\\n    //rounds to zero if x*y < RAY / 2\\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, RAY), y / 2) / y;\\n    }\\n\\n    // This famous algorithm is called \\\"exponentiation by squaring\\\"\\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\\n    //\\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\\n    //\\n    // These facts are why it works:\\n    //\\n    //  If n is even, then x^n = (x^2)^(n/2).\\n    //  If n is odd,  then x^n = x * x^(n-1),\\n    //   and applying the equation for even x gives\\n    //    x^n = x * (x^2)^((n-1) / 2).\\n    //\\n    //  Also, EVM division is flooring and\\n    //    floor[(n-1) / 2] = floor[n / 2].\\n    //\\n    function rpow(uint256 x, uint256 n) internal pure returns (uint256 z) {\\n        z = n % 2 != 0 ? x : RAY;\\n\\n        for (n /= 2; n != 0; n /= 2) {\\n            x = rmul(x, x);\\n\\n            if (n % 2 != 0) {\\n                z = rmul(z, x);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe1c6bb5cff7c83c85792349f61b3f4faf6e22bb02fa95d7af7b269e59a3902b2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162001eb338038062001eb3833981016040819052620000349162000075565b6001600160601b0319606092831b8116608052911b1660a0526020609955620000ac565b80516001600160a01b03811681146200007057600080fd5b919050565b6000806040838503121562000088578182fd5b620000938362000058565b9150620000a36020840162000058565b90509250929050565b60805160601c60a05160601c611dab6200010860003960008181610108015281816102b4015281816104f801528181610f2e01526113ba01526000818160d6015281816101e00152818161105c01526114ed0152611dab6000f3fe6080604052600436106100c65760003560e01c8063984cc32d1161007f578063bae6c2ad11610059578063bae6c2ad146102d6578063c01c37ec146102fa578063d72b9da21461032a578063f2fde38b1461035757600080fd5b8063984cc32d14610262578063add8532b14610282578063af5ea6e7146102a257600080fd5b806302f2c41c146101735780631a695230146101ae57806341495591146101ce578063715018a61461021a5780638129fc1c1461022f5780638da5cb5b1461024457600080fd5b3661016e57336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148061012a5750336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016145b61016c5760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b21039b2b73232b960911b60448201526064015b60405180910390fd5b005b600080fd5b34801561017f57600080fd5b5061019361018e3660046119a3565b610377565b6040516101a596959493929190611b6a565b60405180910390f35b3480156101ba57600080fd5b5061016c6101c93660046118cd565b6103e6565b3480156101da57600080fd5b506102027f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101a5565b34801561022657600080fd5b5061016c6105fd565b34801561023b57600080fd5b5061016c610633565b34801561025057600080fd5b506033546001600160a01b0316610202565b34801561026e57600080fd5b5061016c61027d366004611b18565b6106b8565b34801561028e57600080fd5b5061016c61029d36600461193d565b6106e7565b3480156102ae57600080fd5b506102027f000000000000000000000000000000000000000000000000000000000000000081565b3480156102e257600080fd5b506102ec60995481565b6040519081526020016101a5565b34801561030657600080fd5b5061031a610315366004611905565b610b7b565b60405190151581526020016101a5565b34801561033657600080fd5b506102ec6103453660046118cd565b60986020526000908152604090205481565b34801561036357600080fd5b5061016c6103723660046118cd565b610c21565b6097602052816000526040600020818154811061039357600080fd5b6000918252602090912060059091020180546001820154600283015460038401546004909401546001600160a01b039384169650918316945091821692600160a01b90920463ffffffff16919060ff1686565b6033546001600160a01b031633146104105760405162461bcd60e51b815260040161016390611c75565b600260655414156104635760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610163565b6002606555604051633d49315160e11b81523060048201526000906001600160a01b03831690637a9262a290602401604080518083038186803b1580156104a957600080fd5b505afa1580156104bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e19190611a9d565b602001516001600160801b0316905080156105f4577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316141561059857604051630821fb5760e21b8152600060048201526001600160a01b03831690632087ed5c90602401600060405180830381600087803b15801561057257600080fd5b505af1158015610586573d6000803e3d6000fd5b5050505061059382610cb9565b6105f4565b816001600160a01b031663f756fa216040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156105d357600080fd5b505af11580156105e7573d6000803e3d6000fd5b505050506105f482610cb9565b50506001606555565b6033546001600160a01b031633146106275760405162461bcd60e51b815260040161016390611c75565b6106316000610e12565b565b600054610100900460ff168061064c575060005460ff16155b6106685760405162461bcd60e51b815260040161016390611c27565b600054610100900460ff1615801561068a576000805461ffff19166101011790555b610692610e64565b61069a610ec3565b6106a333610c21565b80156106b5576000805461ff00191690555b50565b6033546001600160a01b031633146106e25760405162461bcd60e51b815260040161016390611c75565b609955565b6002606554141561073a5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610163565b60026065556107498533610b7b565b156107965760405162461bcd60e51b815260206004820152601a60248201527f576974686472617720616c7265616479207375626d69747465640000000000006044820152606401610163565b6099546001600160a01b038616600090815260976020526040902054106107f55760405162461bcd60e51b8152602060048201526013602482015272151c985b9cd9995c881c5d595d5948199d5b1b606a1b6044820152606401610163565b600082600181111561081757634e487b7160e01b600052602160045260246000fd5b141561086e576001600160a01b0383166108695760405162461bcd60e51b8152602060048201526013602482015272139bc819195c1bdcda5d0818dbdb9d1c9858dd606a1b6044820152606401610163565b610906565b600182600181111561089057634e487b7160e01b600052602160045260246000fd5b1415610906576001600160a01b03831633146109065760405162461bcd60e51b815260206004820152602f60248201527f4f6e2077697468647261772c206465706f736974436f6e7472616374206d757360448201526e3a1031329036b9b39739b2b73232b960891b6064820152608401610163565b6040516323b872dd60e01b8152336004820152306024820152604481018290526001600160a01b038616906323b872dd90606401602060405180830381600087803b15801561095457600080fd5b505af1158015610968573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098c91906119ce565b50604051633f0846a960e11b8152600481018290526001600160a01b03861690637e108d5290602401600060405180830381600087803b1580156109cf57600080fd5b505af11580156109e3573d6000803e3d6000fd5b5050505060976000866001600160a01b03166001600160a01b031681526020019081526020016000206040518060c00160405280336001600160a01b03168152602001866001600160a01b03168152602001856001600160a01b031681526020014263ffffffff168152602001838152602001846001811115610a7657634e487b7160e01b600052602160045260246000fd5b90528154600181810184556000938452602093849020835160059093020180546001600160a01b039384166001600160a01b031991821617825594840151818301805491851691909616179094556040830151600285018054606086015163ffffffff16600160a01b026001600160c01b03199091169290941691909117929092179091556080820151600384015560a08201516004840180549394939192909160ff1916908381811115610b3b57634e487b7160e01b600052602160045260246000fd5b021790555050506001600160a01b03851660009081526098602052604081208054839290610b6a908490611caa565b909155505060016065555050505050565b6000805b6001600160a01b038416600090815260976020526040902054811015610c15576001600160a01b0384166000908152609760205260409020805482908110610bd757634e487b7160e01b600052603260045260246000fd5b60009182526020909120600590910201546001600160a01b0384811691161415610c05576001915050610c1b565b610c0e81611d2f565b9050610b7f565b50600090505b92915050565b6033546001600160a01b03163314610c4b5760405162461bcd60e51b815260040161016390611c75565b6001600160a01b038116610cb05760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610163565b6106b581610e12565b6000610cc482610f2a565b6001600160a01b038316600090815260976020908152604080832054609890925282208054929055919250815b8015610e0b576001600160a01b0385166000908152609760205260408120610d1890611159565b90506000610d3386610d2e8460800151876112f9565b61132b565b90508015610df65760008260a001516001811115610d6157634e487b7160e01b600052602160045260246000fd5b1415610d7f57610d7a8260400151836000015183611356565b610dba565b60018260a001516001811115610da557634e487b7160e01b600052602160045260246000fd5b1415610dba57610dba878360000151836113b8565b7f6a454616e1b5afa37e2dbb2a1435095910e1127880e734e440aa57443d7c67bc878383604051610ded93929190611bb5565b60405180910390a15b50508080610e0390611d18565b915050610cf1565b5050505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff1680610e7d575060005460ff16155b610e995760405162461bcd60e51b815260040161016390611c27565b600054610100900460ff16158015610ebb576000805461ffff19166101011790555b6106a3611693565b600054610100900460ff1680610edc575060005460ff16155b610ef85760405162461bcd60e51b815260040161016390611c27565b600054610100900460ff16158015610f1a576000805461ffff19166101011790555b610f22611703565b6106a361176d565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316141561105a576000826001600160a01b031663e00bfe506040518163ffffffff1660e01b815260040160206040518083038186803b158015610fa157600080fd5b505afa158015610fb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd991906118e9565b6040516370a0823160e01b81523060048201529091506001600160a01b038216906370a082319060240160206040518083038186803b15801561101b57600080fd5b505afa15801561102f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110539190611b30565b9392505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316141561109b575047919050565b6000826001600160a01b0316639fcc2d756040518163ffffffff1660e01b815260040160c06040518083038186803b1580156110d657600080fd5b505afa1580156110ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110e91906119e8565b60408082015190516370a0823160e01b81523060048201529192506001600160a01b0316906370a082319060240160206040518083038186803b15801561101b57600080fd5b919050565b61118f6040805160c08101825260008082526020820181905291810182905260608101829052608081018290529060a082015290565b815460009083906111a290600190611d01565b815481106111c057634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805160c08101825260059390930290910180546001600160a01b039081168452600180830154821695850195909552600282015490811692840192909252600160a01b90910463ffffffff1660608301526003810154608083015260048101549192909160a084019160ff9091169081111561125957634e487b7160e01b600052602160045260246000fd5b600181111561127857634e487b7160e01b600052602160045260246000fd5b8152505090508280548061129c57634e487b7160e01b600052603160045260246000fd5b60008281526020812060056000199093019283020180546001600160a01b0319908116825560018201805490911690556002810180546001600160c01b03191690556003810191909155600401805460ff19169055905592915050565b60008161132161131185670de0b6b3a76400006117cd565b61131c600286611cc2565b611834565b6110539190611cc2565b6000670de0b6b3a764000061132161134385856117cd565b61131c6002670de0b6b3a7640000611cc2565b60405163aa67c91960e01b81526001600160a01b03838116600483015284169063aa67c9199083906024016000604051808303818588803b15801561139a57600080fd5b505af11580156113ae573d6000803e3d6000fd5b5050505050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b031614156114eb576000836001600160a01b031663e00bfe506040518163ffffffff1660e01b815260040160206040518083038186803b15801561142d57600080fd5b505afa158015611441573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061146591906118e9565b60405163a9059cbb60e01b81526001600160a01b038581166004830152602482018590529192509082169063a9059cbb90604401602060405180830381600087803b1580156114b357600080fd5b505af11580156114c7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0b91906119ce565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b031614156115ce576000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114611572576040519150601f19603f3d011682016040523d82523d6000602084013e611577565b606091505b50509050806115c85760405162461bcd60e51b815260206004820152601e60248201527f4661696c656420746f20776974686472617720746f206372656469746f7200006044820152606401610163565b50505050565b6000836001600160a01b0316639fcc2d756040518163ffffffff1660e01b815260040160c06040518083038186803b15801561160957600080fd5b505afa15801561161d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061164191906119e8565b604080820151905163a9059cbb60e01b81526001600160a01b0386811660048301526024820186905292935091169063a9059cbb90604401602060405180830381600087803b1580156114b357600080fd5b600054610100900460ff16806116ac575060005460ff16155b6116c85760405162461bcd60e51b815260040161016390611c27565b600054610100900460ff161580156116ea576000805461ffff19166101011790555b600160655580156106b5576000805461ff001916905550565b600054610100900460ff168061171c575060005460ff16155b6117385760405162461bcd60e51b815260040161016390611c27565b600054610100900460ff161580156106a3576000805461ffff191661010117905580156106b5576000805461ff001916905550565b600054610100900460ff1680611786575060005460ff16155b6117a25760405162461bcd60e51b815260040161016390611c27565b600054610100900460ff161580156117c4576000805461ffff19166101011790555b6106a333610e12565b60008115806117f1575082826117e38183611ce2565b92506117ef9083611cc2565b145b610c1b5760405162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6d756c2d6f766572666c6f7760601b6044820152606401610163565b6000826118418382611caa565b9150811015610c1b5760405162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6164642d6f766572666c6f7760601b6044820152606401610163565b8051801515811461115457600080fd5b80516cffffffffffffffffffffffffff8116811461115457600080fd5b805166ffffffffffffff8116811461115457600080fd5b6000602082840312156118de578081fd5b813561105381611d60565b6000602082840312156118fa578081fd5b815161105381611d60565b60008060408385031215611917578081fd5b823561192281611d60565b9150602083013561193281611d60565b809150509250929050565b600080600080600060a08688031215611954578081fd5b853561195f81611d60565b9450602086013561196f81611d60565b9350604086013561197f81611d60565b9250606086013560028110611992578182fd5b949793965091946080013592915050565b600080604083850312156119b5578182fd5b82356119c081611d60565b946020939093013593505050565b6000602082840312156119df578081fd5b61105382611889565b600060c082840312156119f9578081fd5b60405160c0810181811067ffffffffffffffff82111715611a2857634e487b7160e01b83526041600452602483fd5b604052611a3483611889565b8152602083015160ff81168114611a49578283fd5b60208201526040830151611a5c81611d60565b60408201526060830151611a6f81611d60565b6060820152611a80608084016118b6565b6080820152611a9160a08401611899565b60a08201529392505050565b600060408284031215611aae578081fd5b6040516040810181811067ffffffffffffffff82111715611add57634e487b7160e01b83526041600452602483fd5b604052825161ffff81168114611af1578283fd5b815260208301516001600160801b0381168114611b0c578283fd5b60208201529392505050565b600060208284031215611b29578081fd5b5035919050565b600060208284031215611b41578081fd5b5051919050565b60028110611b6657634e487b7160e01b600052602160045260246000fd5b9052565b6001600160a01b03878116825286811660208301528516604082015263ffffffff841660608201526080810183905260c08101611baa60a0830184611b48565b979650505050505050565b60006101008201905060018060a01b0380861683528085511660208401528060208601511660408401528060408601511660608401525063ffffffff6060850151166080830152608084015160a083015260a0840151611c1860c0840182611b48565b508260e0830152949350505050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008219821115611cbd57611cbd611d4a565b500190565b600082611cdd57634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615611cfc57611cfc611d4a565b500290565b600082821015611d1357611d13611d4a565b500390565b600081611d2757611d27611d4a565b506000190190565b6000600019821415611d4357611d43611d4a565b5060010190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03811681146106b557600080fdfea26469706673582212201628a1abce72d91e0d82745927b690618c31bcd1ef7b632b0df173ec079c0d0864736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106100c65760003560e01c8063984cc32d1161007f578063bae6c2ad11610059578063bae6c2ad146102d6578063c01c37ec146102fa578063d72b9da21461032a578063f2fde38b1461035757600080fd5b8063984cc32d14610262578063add8532b14610282578063af5ea6e7146102a257600080fd5b806302f2c41c146101735780631a695230146101ae57806341495591146101ce578063715018a61461021a5780638129fc1c1461022f5780638da5cb5b1461024457600080fd5b3661016e57336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148061012a5750336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016145b61016c5760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b21039b2b73232b960911b60448201526064015b60405180910390fd5b005b600080fd5b34801561017f57600080fd5b5061019361018e3660046119a3565b610377565b6040516101a596959493929190611b6a565b60405180910390f35b3480156101ba57600080fd5b5061016c6101c93660046118cd565b6103e6565b3480156101da57600080fd5b506102027f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101a5565b34801561022657600080fd5b5061016c6105fd565b34801561023b57600080fd5b5061016c610633565b34801561025057600080fd5b506033546001600160a01b0316610202565b34801561026e57600080fd5b5061016c61027d366004611b18565b6106b8565b34801561028e57600080fd5b5061016c61029d36600461193d565b6106e7565b3480156102ae57600080fd5b506102027f000000000000000000000000000000000000000000000000000000000000000081565b3480156102e257600080fd5b506102ec60995481565b6040519081526020016101a5565b34801561030657600080fd5b5061031a610315366004611905565b610b7b565b60405190151581526020016101a5565b34801561033657600080fd5b506102ec6103453660046118cd565b60986020526000908152604090205481565b34801561036357600080fd5b5061016c6103723660046118cd565b610c21565b6097602052816000526040600020818154811061039357600080fd5b6000918252602090912060059091020180546001820154600283015460038401546004909401546001600160a01b039384169650918316945091821692600160a01b90920463ffffffff16919060ff1686565b6033546001600160a01b031633146104105760405162461bcd60e51b815260040161016390611c75565b600260655414156104635760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610163565b6002606555604051633d49315160e11b81523060048201526000906001600160a01b03831690637a9262a290602401604080518083038186803b1580156104a957600080fd5b505afa1580156104bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e19190611a9d565b602001516001600160801b0316905080156105f4577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316141561059857604051630821fb5760e21b8152600060048201526001600160a01b03831690632087ed5c90602401600060405180830381600087803b15801561057257600080fd5b505af1158015610586573d6000803e3d6000fd5b5050505061059382610cb9565b6105f4565b816001600160a01b031663f756fa216040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156105d357600080fd5b505af11580156105e7573d6000803e3d6000fd5b505050506105f482610cb9565b50506001606555565b6033546001600160a01b031633146106275760405162461bcd60e51b815260040161016390611c75565b6106316000610e12565b565b600054610100900460ff168061064c575060005460ff16155b6106685760405162461bcd60e51b815260040161016390611c27565b600054610100900460ff1615801561068a576000805461ffff19166101011790555b610692610e64565b61069a610ec3565b6106a333610c21565b80156106b5576000805461ff00191690555b50565b6033546001600160a01b031633146106e25760405162461bcd60e51b815260040161016390611c75565b609955565b6002606554141561073a5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610163565b60026065556107498533610b7b565b156107965760405162461bcd60e51b815260206004820152601a60248201527f576974686472617720616c7265616479207375626d69747465640000000000006044820152606401610163565b6099546001600160a01b038616600090815260976020526040902054106107f55760405162461bcd60e51b8152602060048201526013602482015272151c985b9cd9995c881c5d595d5948199d5b1b606a1b6044820152606401610163565b600082600181111561081757634e487b7160e01b600052602160045260246000fd5b141561086e576001600160a01b0383166108695760405162461bcd60e51b8152602060048201526013602482015272139bc819195c1bdcda5d0818dbdb9d1c9858dd606a1b6044820152606401610163565b610906565b600182600181111561089057634e487b7160e01b600052602160045260246000fd5b1415610906576001600160a01b03831633146109065760405162461bcd60e51b815260206004820152602f60248201527f4f6e2077697468647261772c206465706f736974436f6e7472616374206d757360448201526e3a1031329036b9b39739b2b73232b960891b6064820152608401610163565b6040516323b872dd60e01b8152336004820152306024820152604481018290526001600160a01b038616906323b872dd90606401602060405180830381600087803b15801561095457600080fd5b505af1158015610968573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098c91906119ce565b50604051633f0846a960e11b8152600481018290526001600160a01b03861690637e108d5290602401600060405180830381600087803b1580156109cf57600080fd5b505af11580156109e3573d6000803e3d6000fd5b5050505060976000866001600160a01b03166001600160a01b031681526020019081526020016000206040518060c00160405280336001600160a01b03168152602001866001600160a01b03168152602001856001600160a01b031681526020014263ffffffff168152602001838152602001846001811115610a7657634e487b7160e01b600052602160045260246000fd5b90528154600181810184556000938452602093849020835160059093020180546001600160a01b039384166001600160a01b031991821617825594840151818301805491851691909616179094556040830151600285018054606086015163ffffffff16600160a01b026001600160c01b03199091169290941691909117929092179091556080820151600384015560a08201516004840180549394939192909160ff1916908381811115610b3b57634e487b7160e01b600052602160045260246000fd5b021790555050506001600160a01b03851660009081526098602052604081208054839290610b6a908490611caa565b909155505060016065555050505050565b6000805b6001600160a01b038416600090815260976020526040902054811015610c15576001600160a01b0384166000908152609760205260409020805482908110610bd757634e487b7160e01b600052603260045260246000fd5b60009182526020909120600590910201546001600160a01b0384811691161415610c05576001915050610c1b565b610c0e81611d2f565b9050610b7f565b50600090505b92915050565b6033546001600160a01b03163314610c4b5760405162461bcd60e51b815260040161016390611c75565b6001600160a01b038116610cb05760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610163565b6106b581610e12565b6000610cc482610f2a565b6001600160a01b038316600090815260976020908152604080832054609890925282208054929055919250815b8015610e0b576001600160a01b0385166000908152609760205260408120610d1890611159565b90506000610d3386610d2e8460800151876112f9565b61132b565b90508015610df65760008260a001516001811115610d6157634e487b7160e01b600052602160045260246000fd5b1415610d7f57610d7a8260400151836000015183611356565b610dba565b60018260a001516001811115610da557634e487b7160e01b600052602160045260246000fd5b1415610dba57610dba878360000151836113b8565b7f6a454616e1b5afa37e2dbb2a1435095910e1127880e734e440aa57443d7c67bc878383604051610ded93929190611bb5565b60405180910390a15b50508080610e0390611d18565b915050610cf1565b5050505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff1680610e7d575060005460ff16155b610e995760405162461bcd60e51b815260040161016390611c27565b600054610100900460ff16158015610ebb576000805461ffff19166101011790555b6106a3611693565b600054610100900460ff1680610edc575060005460ff16155b610ef85760405162461bcd60e51b815260040161016390611c27565b600054610100900460ff16158015610f1a576000805461ffff19166101011790555b610f22611703565b6106a361176d565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316141561105a576000826001600160a01b031663e00bfe506040518163ffffffff1660e01b815260040160206040518083038186803b158015610fa157600080fd5b505afa158015610fb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd991906118e9565b6040516370a0823160e01b81523060048201529091506001600160a01b038216906370a082319060240160206040518083038186803b15801561101b57600080fd5b505afa15801561102f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110539190611b30565b9392505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316141561109b575047919050565b6000826001600160a01b0316639fcc2d756040518163ffffffff1660e01b815260040160c06040518083038186803b1580156110d657600080fd5b505afa1580156110ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110e91906119e8565b60408082015190516370a0823160e01b81523060048201529192506001600160a01b0316906370a082319060240160206040518083038186803b15801561101b57600080fd5b919050565b61118f6040805160c08101825260008082526020820181905291810182905260608101829052608081018290529060a082015290565b815460009083906111a290600190611d01565b815481106111c057634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805160c08101825260059390930290910180546001600160a01b039081168452600180830154821695850195909552600282015490811692840192909252600160a01b90910463ffffffff1660608301526003810154608083015260048101549192909160a084019160ff9091169081111561125957634e487b7160e01b600052602160045260246000fd5b600181111561127857634e487b7160e01b600052602160045260246000fd5b8152505090508280548061129c57634e487b7160e01b600052603160045260246000fd5b60008281526020812060056000199093019283020180546001600160a01b0319908116825560018201805490911690556002810180546001600160c01b03191690556003810191909155600401805460ff19169055905592915050565b60008161132161131185670de0b6b3a76400006117cd565b61131c600286611cc2565b611834565b6110539190611cc2565b6000670de0b6b3a764000061132161134385856117cd565b61131c6002670de0b6b3a7640000611cc2565b60405163aa67c91960e01b81526001600160a01b03838116600483015284169063aa67c9199083906024016000604051808303818588803b15801561139a57600080fd5b505af11580156113ae573d6000803e3d6000fd5b5050505050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b031614156114eb576000836001600160a01b031663e00bfe506040518163ffffffff1660e01b815260040160206040518083038186803b15801561142d57600080fd5b505afa158015611441573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061146591906118e9565b60405163a9059cbb60e01b81526001600160a01b038581166004830152602482018590529192509082169063a9059cbb90604401602060405180830381600087803b1580156114b357600080fd5b505af11580156114c7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0b91906119ce565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b031614156115ce576000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114611572576040519150601f19603f3d011682016040523d82523d6000602084013e611577565b606091505b50509050806115c85760405162461bcd60e51b815260206004820152601e60248201527f4661696c656420746f20776974686472617720746f206372656469746f7200006044820152606401610163565b50505050565b6000836001600160a01b0316639fcc2d756040518163ffffffff1660e01b815260040160c06040518083038186803b15801561160957600080fd5b505afa15801561161d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061164191906119e8565b604080820151905163a9059cbb60e01b81526001600160a01b0386811660048301526024820186905292935091169063a9059cbb90604401602060405180830381600087803b1580156114b357600080fd5b600054610100900460ff16806116ac575060005460ff16155b6116c85760405162461bcd60e51b815260040161016390611c27565b600054610100900460ff161580156116ea576000805461ffff19166101011790555b600160655580156106b5576000805461ff001916905550565b600054610100900460ff168061171c575060005460ff16155b6117385760405162461bcd60e51b815260040161016390611c27565b600054610100900460ff161580156106a3576000805461ffff191661010117905580156106b5576000805461ff001916905550565b600054610100900460ff1680611786575060005460ff16155b6117a25760405162461bcd60e51b815260040161016390611c27565b600054610100900460ff161580156117c4576000805461ffff19166101011790555b6106a333610e12565b60008115806117f1575082826117e38183611ce2565b92506117ef9083611cc2565b145b610c1b5760405162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6d756c2d6f766572666c6f7760601b6044820152606401610163565b6000826118418382611caa565b9150811015610c1b5760405162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6164642d6f766572666c6f7760601b6044820152606401610163565b8051801515811461115457600080fd5b80516cffffffffffffffffffffffffff8116811461115457600080fd5b805166ffffffffffffff8116811461115457600080fd5b6000602082840312156118de578081fd5b813561105381611d60565b6000602082840312156118fa578081fd5b815161105381611d60565b60008060408385031215611917578081fd5b823561192281611d60565b9150602083013561193281611d60565b809150509250929050565b600080600080600060a08688031215611954578081fd5b853561195f81611d60565b9450602086013561196f81611d60565b9350604086013561197f81611d60565b9250606086013560028110611992578182fd5b949793965091946080013592915050565b600080604083850312156119b5578182fd5b82356119c081611d60565b946020939093013593505050565b6000602082840312156119df578081fd5b61105382611889565b600060c082840312156119f9578081fd5b60405160c0810181811067ffffffffffffffff82111715611a2857634e487b7160e01b83526041600452602483fd5b604052611a3483611889565b8152602083015160ff81168114611a49578283fd5b60208201526040830151611a5c81611d60565b60408201526060830151611a6f81611d60565b6060820152611a80608084016118b6565b6080820152611a9160a08401611899565b60a08201529392505050565b600060408284031215611aae578081fd5b6040516040810181811067ffffffffffffffff82111715611add57634e487b7160e01b83526041600452602483fd5b604052825161ffff81168114611af1578283fd5b815260208301516001600160801b0381168114611b0c578283fd5b60208201529392505050565b600060208284031215611b29578081fd5b5035919050565b600060208284031215611b41578081fd5b5051919050565b60028110611b6657634e487b7160e01b600052602160045260246000fd5b9052565b6001600160a01b03878116825286811660208301528516604082015263ffffffff841660608201526080810183905260c08101611baa60a0830184611b48565b979650505050505050565b60006101008201905060018060a01b0380861683528085511660208401528060208601511660408401528060408601511660608401525063ffffffff6060850151166080830152608084015160a083015260a0840151611c1860c0840182611b48565b508260e0830152949350505050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008219821115611cbd57611cbd611d4a565b500190565b600082611cdd57634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615611cfc57611cfc611d4a565b500290565b600082821015611d1357611d13611d4a565b500390565b600081611d2757611d27611d4a565b506000190190565b6000600019821415611d4357611d43611d4a565b5060010190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03811681146106b557600080fdfea26469706673582212201628a1abce72d91e0d82745927b690618c31bcd1ef7b632b0df173ec079c0d0864736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 176,
        "contract": "contracts/utils/VaultQueue.sol:VaultQueue",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 179,
        "contract": "contracts/utils/VaultQueue.sol:VaultQueue",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 993,
        "contract": "contracts/utils/VaultQueue.sol:VaultQueue",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 56,
        "contract": "contracts/utils/VaultQueue.sol:VaultQueue",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 169,
        "contract": "contracts/utils/VaultQueue.sol:VaultQueue",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 230,
        "contract": "contracts/utils/VaultQueue.sol:VaultQueue",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 273,
        "contract": "contracts/utils/VaultQueue.sol:VaultQueue",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 14246,
        "contract": "contracts/utils/VaultQueue.sol:VaultQueue",
        "label": "qTransfer",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_address,t_array(t_struct(Transfer)14236_storage)dyn_storage)"
      },
      {
        "astId": 14250,
        "contract": "contracts/utils/VaultQueue.sol:VaultQueue",
        "label": "totalAmount",
        "offset": 0,
        "slot": "152",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 14256,
        "contract": "contracts/utils/VaultQueue.sol:VaultQueue",
        "label": "queueSize",
        "offset": 0,
        "slot": "153",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Transfer)14236_storage)dyn_storage": {
        "base": "t_struct(Transfer)14236_storage",
        "encoding": "dynamic_array",
        "label": "struct VaultQueue.Transfer[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(TransferAction)14222": {
        "encoding": "inplace",
        "label": "enum VaultQueue.TransferAction",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_struct(Transfer)14236_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct VaultQueue.Transfer[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Transfer)14236_storage)dyn_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Transfer)14236_storage": {
        "encoding": "inplace",
        "label": "struct VaultQueue.Transfer",
        "members": [
          {
            "astId": 14224,
            "contract": "contracts/utils/VaultQueue.sol:VaultQueue",
            "label": "creditor",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 14226,
            "contract": "contracts/utils/VaultQueue.sol:VaultQueue",
            "label": "dstVault",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 14228,
            "contract": "contracts/utils/VaultQueue.sol:VaultQueue",
            "label": "depositContract",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 14230,
            "contract": "contracts/utils/VaultQueue.sol:VaultQueue",
            "label": "timestamp",
            "offset": 20,
            "slot": "2",
            "type": "t_uint32"
          },
          {
            "astId": 14232,
            "contract": "contracts/utils/VaultQueue.sol:VaultQueue",
            "label": "amount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 14235,
            "contract": "contracts/utils/VaultQueue.sol:VaultQueue",
            "label": "action",
            "offset": 0,
            "slot": "4",
            "type": "t_enum(TransferAction)14222"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}